syntax enable

set shiftround
set smarttab
set noswapfile

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" m is repeat motion backwards, , forwards (because I'm remapping ; to :)
nnoremap m ,
nnoremap , ;
" semicolon for : and ;; for :!
nnoremap ; :
nnoremap ;; :!

map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

cmap w!! w !sudo tee % >/dev/null

set hidden

set scrolloff=3
set autoread
"nnoremap <silent> <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" http://stackoverflow.com/questions/95072/what-are-your-favorite-vim-tricks
map! jj <Esc>
" imap jj <esc>

" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

au BufWritePre * execute 'normal _$'

set whichwrap=b,s,<,>,h,l

set backup
set backupcopy=yes
set backupskip=/tmp/*,~/.vim/backup/*
set backupdir=~/.vim/tmp/backup//
au BufWritePre <buffer> let &backupext = '~' . localtime()
function! DeleteOldBackups()
  " Delete backups over 14 days old
  call system('find ~/.vim/backup -mtime +14 -exec rm "{}" \;')
endfunction
au VimLeave * call DeleteOldBackups()
set undofile
set undodir=~/.vim/tmp/undo//
set directory=~/.vim/tmp//

source ~/.simplenoterc

" https://github.com/AndrewRadev/splitjoin.vim/blob/master/doc/splitjoin.txt
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

nnoremap <F5> :noh<return><esc>

nmap <silent> <leader>reload :source ~/.vimrc<CR>
nmap <leader>vimrc .vsplit ~/.vim/vimrc.local<CR>
augroup reload_vimrc
  au!
  au BufWritePost *vimrc* source ~/.vimrc
augroup END

" http://vim.wikia.com/wiki/Great_wildmode/wildmenu_and_console_mouse
set wildmenu
set wildmode=list:longest,full

runtime macros/matchit.vim

let g:LustyJugglerSuppressRubyWarning = 1

set shortmess=aIoO

set pastetoggle=<F2>

" fix <SNR>40_DiscretionaryEnd?
let g:SuperTabDefaultCompletionType = "context"

let g:solarized_termcolors=256
set t_Co=16
set background=dark
color solarized

" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

set relativenumber

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

set colorcolumn=85

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

au FocusLost * :wa

nnoremap <leader>w <C-w>v<C-w>l

set wildignore+=*.o,*.obj,.git,*.pyc,*.otf,*.ttf

let yankring_history_dir='~/.vim/tmp//'

let g:ragtag_global_maps = 1

set tags+=.git/tags

" http://amix.dk/blog/post/160
map <leader>n :cn<cr>
map <leader>p :cp<cr>
map <leader>c :botright cw 10<cr>

map <space> /
map <m-space> ?

nmap gp `[v`]

nmap <leader>f :FufFileWithCurrentBufferDir<CR>
nmap <leader>b :FufBuffer<CR>
nmap <leader>t :FufTaggedFile<CR>
let g:fuf_buffertag_ctagsPath='ctags'
let g:fuf_buffertag__coffee='--language-force=coffee'
let g:fuf_buffertag__sass='--language-force=sass'

" Rails
autocmd User Rails  Rnavcommand admin app/admin -glob=**/*
autocmd User Rails  Rnavcommand factory spec/factories/ -glob=**/* -suffix=_factory.rb

" http://yanpritzker.com/2011/11/30/vim-demystified-ten-commands-you-can-start-using-today/
nnoremap <silent> Z <C-^>
nnoremap <silent> K :GitGrep <cword><CR>
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s
nnoremap <silent> H <C-w>h
nnoremap <silent> L <C-w>l
nnoremap <silent> I <C-w>k
nnoremap <silent> M <C-w>j

set cursorline
